version: 2.1

jobs:
  build:
    resource_class: medium
    docker:
      - image: docker:25.0.2
        auth:
          username: hozanaci
          password: $DOCKERHUB_PASSWORD
    environment:
      DOCKER_IMAGE: hozanaci/rabbitmq
      DOCKERHUB_USERNAME: hozanaci

    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk --update add --no-cache docker docker-cli-compose git

      - run:
          name: Activate experimental features
          command: |
            mkdir -p ~/.docker
            echo '{"experimental": true}' > ~/.docker/daemon.json

      - run:
          name: Create a new builder
          command: |
            docker buildx create --use --name hozana-builder --driver docker-container
            docker buildx inspect --bootstrap

      - run:
          name: Build application Docker image
          command: |
            echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin
            export DOCKER_BUILDKIT=1
            docker buildx build --provenance=true --no-cache -t $DOCKER_IMAGE:${CIRCLE_SHA1} --push .

  deploy:
    resource_class: medium
    docker:
      - image: docker:25.0.2
        auth:
          username: hozanaci
          password: $DOCKERHUB_PASSWORD
    environment:
      DOCKER_IMAGE: hozanaci/rabbitmq
      DOCKERHUB_USERNAME: hozanaci

    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk --update add --no-cache docker docker-cli-compose git

      - run:
          name: Activate experimental features
          command: |
            mkdir -p ~/.docker
            echo '{"experimental": true}' > ~/.docker/daemon.json

      - run:
          name: Create a new builder
          command: |
            docker buildx create --use --name hozana-builder
            docker buildx inspect --bootstrap

      - run:
          name: Login into DockerHub
          command: |
            echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin

      - run:
          name: Recover release candidate
          command: |
            docker pull $DOCKER_IMAGE:${CIRCLE_SHA1}

      - run:
          name: Build application Docker image & publish image to :branchname tag
          command: |
            echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin
            export DOCKER_BUILDKIT=1
            docker buildx build --provenance=true -t $DOCKER_IMAGE:${CIRCLE_BRANCH} --push .

# Orchestrate our job run sequence
workflows:
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - master
